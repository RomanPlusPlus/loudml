/*
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */

package org.elasticsearch.examples.nativescript.script;

import java.util.Map;
import java.util.ArrayList;
import java.util.regex.Pattern;
import java.util.regex.Matcher;

import org.elasticsearch.common.Strings;
import org.elasticsearch.common.settings.Setting;
import org.elasticsearch.common.settings.Settings;
import org.elasticsearch.common.Nullable;
import org.elasticsearch.common.xcontent.support.XContentMapValues;
import org.elasticsearch.index.fielddata.ScriptDocValues;
import org.elasticsearch.index.fielddata.ScriptDocValues.Longs;
import org.elasticsearch.script.AbstractSearchScript;
import org.elasticsearch.script.ExecutableScript;
import org.elasticsearch.script.NativeScriptFactory;

/**
 * Implementation of the native script that matches a given field against internal regular expressions.
 * <p>
 * Native scripts are built using factories that are returned by
 * {@link org.elasticsearch.examples.nativescript.plugin.BeatNativeScriptPlugin#getNativeScripts()}
 * method when plugin is loaded.
 */
public class DeviceSearchScriptFactory implements NativeScriptFactory {
    // Plugins can use elasticsearch settings and even define their own settings
    public static final Setting<String> DEVICE_SEARCH_SCRIPT_DEFAULT_FIELD_NAME =
        Setting.simpleString("beat.devicesearch.default_field_name", Setting.Property.NodeScope);

    public final String defaultFieldName;

    public DeviceSearchScriptFactory(Settings settings) {
        defaultFieldName = DEVICE_SEARCH_SCRIPT_DEFAULT_FIELD_NAME.get(settings);
    }
    /**
     * This method is called for every search on every shard.
     *
     * @param params list of script parameters passed with the query
     * @return new native script
     */
    @Override
    public ExecutableScript newScript(@Nullable Map<String, Object> params) {
        // Example of a mandatory string parameter
        // The XContentMapValues helper class can be used to simplify parameter parsing
        String fieldName = params == null ? null : XContentMapValues.nodeStringValue(params.get("field"), defaultFieldName);
        if (!Strings.hasLength(fieldName)) {
            throw new IllegalArgumentException("Missing the field parameter");
        }

        // optional String parameters
        String device = params == null ? "" : XContentMapValues.nodeStringValue(params.get("device"), "");
        String model = params == null ? "" : XContentMapValues.nodeStringValue(params.get("model"), "");
        String operation = params == null ? "" : XContentMapValues.nodeStringValue(params.get("operation"), "");

        return new DeviceSearchScript(fieldName, operation, device, model);
    }

    @Override
    public boolean needsScores() {
        return false;
    }

    @Override
    public String getName() {
        return "UserAgentSearch";
    }

    /**
     * The native script has to implement {@link org.elasticsearch.script.SearchScript} interface. But the
     * {@link org.elasticsearch.script.AbstractSearchScript} class can be used to simplify the implementation.
     */
    public static class DeviceSearchScript extends AbstractSearchScript {

        private final ArrayList<Pattern> al;
        private final ArrayList<String> dl;
        private final String fieldName;
        private final String op;
        private final String searchDevice;
        private final String searchModel;

        /**
         * Factory creates this script on every
         *
         * @param fieldName the name of the field that should be checked
         * @param device the required device
         */
        private DeviceSearchScript(String fieldName, String operation, String device, String model) {
            this.fieldName = fieldName;
            this.op = operation;
            this.searchDevice = device;
            this.searchModel = model;
            this.al = new ArrayList<Pattern>();
            this.dl = new ArrayList<String>();
{% block __DeviceSearchScript__ %}{% endblock %}
        }

        @Override
        @SuppressWarnings("unchecked")
        public Object run() {
	    String device = null;
	    String model = null;

            // First we get field using doc lookup
            ScriptDocValues<String> docValue = (ScriptDocValues<String>) doc().get(fieldName);
            // Check if field exists
            if (docValue != null && !docValue.isEmpty()) {
                final String fieldValue = ((ScriptDocValues.Strings) docValue).getValue();
                if (fieldValue != null) {
			if(this.op.isEmpty())
				if(this.searchDevice.isEmpty())
					return true;

			for(int i = 0; i < al.size(); i++)
			{
				Pattern pattern = al.get(i);
				Matcher matcher = pattern.matcher(fieldValue);
				if (matcher.find()) {
					device = dl.get(i);
	                                if (this.op.isEmpty()) {
	                                       return this.searchDevice.equals(device);
					} else {
                                        	if (this.op.equals("getdevice"))
       	                                        	if(this.searchDevice.isEmpty() ||
       	                                                	this.searchDevice.equals(device))
	                                                        	return device;
					}
				}
			}
                }
		else {
			if(this.op.isEmpty())
				return null;
			else
				return false;
		}
            }
            return null;
        }

    }
}

